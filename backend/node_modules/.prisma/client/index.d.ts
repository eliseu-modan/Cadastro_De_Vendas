
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model Products
 * 
 */
export type Products = $Result.DefaultSelection<Prisma.$ProductsPayload>
/**
 * Model RegisterSales
 * 
 */
export type RegisterSales = $Result.DefaultSelection<Prisma.$RegisterSalesPayload>
/**
 * Model CreateUser
 * 
 */
export type CreateUser = $Result.DefaultSelection<Prisma.$CreateUserPayload>

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Products
 * const products = await prisma.products.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Products
   * const products = await prisma.products.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<'extends', Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.products`: Exposes CRUD operations for the **Products** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Products
    * const products = await prisma.products.findMany()
    * ```
    */
  get products(): Prisma.ProductsDelegate<ExtArgs>;

  /**
   * `prisma.registerSales`: Exposes CRUD operations for the **RegisterSales** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more RegisterSales
    * const registerSales = await prisma.registerSales.findMany()
    * ```
    */
  get registerSales(): Prisma.RegisterSalesDelegate<ExtArgs>;

  /**
   * `prisma.createUser`: Exposes CRUD operations for the **CreateUser** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more CreateUsers
    * const createUsers = await prisma.createUser.findMany()
    * ```
    */
  get createUser(): Prisma.CreateUserDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.7.1
   * Query Engine version: 0ca5ccbcfa6bdc81c003cf549abe4269f59c41e5
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray | { toJSON(): unknown }

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Products: 'Products',
    RegisterSales: 'RegisterSales',
    CreateUser: 'CreateUser'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }


  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs}, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    meta: {
      modelProps: 'products' | 'registerSales' | 'createUser'
      txIsolationLevel: Prisma.TransactionIsolationLevel
    },
    model: {
      Products: {
        payload: Prisma.$ProductsPayload<ExtArgs>
        fields: Prisma.ProductsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ProductsFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProductsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ProductsFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProductsPayload>
          }
          findFirst: {
            args: Prisma.ProductsFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProductsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ProductsFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProductsPayload>
          }
          findMany: {
            args: Prisma.ProductsFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProductsPayload>[]
          }
          create: {
            args: Prisma.ProductsCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProductsPayload>
          }
          createMany: {
            args: Prisma.ProductsCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.ProductsDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProductsPayload>
          }
          update: {
            args: Prisma.ProductsUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProductsPayload>
          }
          deleteMany: {
            args: Prisma.ProductsDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.ProductsUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.ProductsUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProductsPayload>
          }
          aggregate: {
            args: Prisma.ProductsAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateProducts>
          }
          groupBy: {
            args: Prisma.ProductsGroupByArgs<ExtArgs>,
            result: $Utils.Optional<ProductsGroupByOutputType>[]
          }
          count: {
            args: Prisma.ProductsCountArgs<ExtArgs>,
            result: $Utils.Optional<ProductsCountAggregateOutputType> | number
          }
        }
      }
      RegisterSales: {
        payload: Prisma.$RegisterSalesPayload<ExtArgs>
        fields: Prisma.RegisterSalesFieldRefs
        operations: {
          findUnique: {
            args: Prisma.RegisterSalesFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RegisterSalesPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.RegisterSalesFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RegisterSalesPayload>
          }
          findFirst: {
            args: Prisma.RegisterSalesFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RegisterSalesPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.RegisterSalesFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RegisterSalesPayload>
          }
          findMany: {
            args: Prisma.RegisterSalesFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RegisterSalesPayload>[]
          }
          create: {
            args: Prisma.RegisterSalesCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RegisterSalesPayload>
          }
          createMany: {
            args: Prisma.RegisterSalesCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.RegisterSalesDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RegisterSalesPayload>
          }
          update: {
            args: Prisma.RegisterSalesUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RegisterSalesPayload>
          }
          deleteMany: {
            args: Prisma.RegisterSalesDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.RegisterSalesUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.RegisterSalesUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RegisterSalesPayload>
          }
          aggregate: {
            args: Prisma.RegisterSalesAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateRegisterSales>
          }
          groupBy: {
            args: Prisma.RegisterSalesGroupByArgs<ExtArgs>,
            result: $Utils.Optional<RegisterSalesGroupByOutputType>[]
          }
          count: {
            args: Prisma.RegisterSalesCountArgs<ExtArgs>,
            result: $Utils.Optional<RegisterSalesCountAggregateOutputType> | number
          }
        }
      }
      CreateUser: {
        payload: Prisma.$CreateUserPayload<ExtArgs>
        fields: Prisma.CreateUserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CreateUserFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CreateUserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CreateUserFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CreateUserPayload>
          }
          findFirst: {
            args: Prisma.CreateUserFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CreateUserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CreateUserFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CreateUserPayload>
          }
          findMany: {
            args: Prisma.CreateUserFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CreateUserPayload>[]
          }
          create: {
            args: Prisma.CreateUserCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CreateUserPayload>
          }
          createMany: {
            args: Prisma.CreateUserCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.CreateUserDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CreateUserPayload>
          }
          update: {
            args: Prisma.CreateUserUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CreateUserPayload>
          }
          deleteMany: {
            args: Prisma.CreateUserDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.CreateUserUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.CreateUserUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CreateUserPayload>
          }
          aggregate: {
            args: Prisma.CreateUserAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateCreateUser>
          }
          groupBy: {
            args: Prisma.CreateUserGroupByArgs<ExtArgs>,
            result: $Utils.Optional<CreateUserGroupByOutputType>[]
          }
          count: {
            args: Prisma.CreateUserCountArgs<ExtArgs>,
            result: $Utils.Optional<CreateUserCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<'define', Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type CreateUserCountOutputType
   */

  export type CreateUserCountOutputType = {
    products: number
    RegisterSales: number
  }

  export type CreateUserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    products?: boolean | CreateUserCountOutputTypeCountProductsArgs
    RegisterSales?: boolean | CreateUserCountOutputTypeCountRegisterSalesArgs
  }

  // Custom InputTypes

  /**
   * CreateUserCountOutputType without action
   */
  export type CreateUserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CreateUserCountOutputType
     */
    select?: CreateUserCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * CreateUserCountOutputType without action
   */
  export type CreateUserCountOutputTypeCountProductsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProductsWhereInput
  }


  /**
   * CreateUserCountOutputType without action
   */
  export type CreateUserCountOutputTypeCountRegisterSalesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RegisterSalesWhereInput
  }



  /**
   * Models
   */

  /**
   * Model Products
   */

  export type AggregateProducts = {
    _count: ProductsCountAggregateOutputType | null
    _avg: ProductsAvgAggregateOutputType | null
    _sum: ProductsSumAggregateOutputType | null
    _min: ProductsMinAggregateOutputType | null
    _max: ProductsMaxAggregateOutputType | null
  }

  export type ProductsAvgAggregateOutputType = {
    id: number | null
    userId: number | null
  }

  export type ProductsSumAggregateOutputType = {
    id: number | null
    userId: number | null
  }

  export type ProductsMinAggregateOutputType = {
    id: number | null
    name: string | null
    userId: number | null
    price: string | null
    code: string | null
    Cor: string | null
    Peso: string | null
  }

  export type ProductsMaxAggregateOutputType = {
    id: number | null
    name: string | null
    userId: number | null
    price: string | null
    code: string | null
    Cor: string | null
    Peso: string | null
  }

  export type ProductsCountAggregateOutputType = {
    id: number
    name: number
    userId: number
    price: number
    code: number
    Cor: number
    Peso: number
    _all: number
  }


  export type ProductsAvgAggregateInputType = {
    id?: true
    userId?: true
  }

  export type ProductsSumAggregateInputType = {
    id?: true
    userId?: true
  }

  export type ProductsMinAggregateInputType = {
    id?: true
    name?: true
    userId?: true
    price?: true
    code?: true
    Cor?: true
    Peso?: true
  }

  export type ProductsMaxAggregateInputType = {
    id?: true
    name?: true
    userId?: true
    price?: true
    code?: true
    Cor?: true
    Peso?: true
  }

  export type ProductsCountAggregateInputType = {
    id?: true
    name?: true
    userId?: true
    price?: true
    code?: true
    Cor?: true
    Peso?: true
    _all?: true
  }

  export type ProductsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Products to aggregate.
     */
    where?: ProductsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Products to fetch.
     */
    orderBy?: ProductsOrderByWithRelationInput | ProductsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ProductsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Products from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Products.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Products
    **/
    _count?: true | ProductsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ProductsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ProductsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProductsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProductsMaxAggregateInputType
  }

  export type GetProductsAggregateType<T extends ProductsAggregateArgs> = {
        [P in keyof T & keyof AggregateProducts]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProducts[P]>
      : GetScalarType<T[P], AggregateProducts[P]>
  }




  export type ProductsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProductsWhereInput
    orderBy?: ProductsOrderByWithAggregationInput | ProductsOrderByWithAggregationInput[]
    by: ProductsScalarFieldEnum[] | ProductsScalarFieldEnum
    having?: ProductsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProductsCountAggregateInputType | true
    _avg?: ProductsAvgAggregateInputType
    _sum?: ProductsSumAggregateInputType
    _min?: ProductsMinAggregateInputType
    _max?: ProductsMaxAggregateInputType
  }

  export type ProductsGroupByOutputType = {
    id: number
    name: string
    userId: number | null
    price: string
    code: string
    Cor: string
    Peso: string
    _count: ProductsCountAggregateOutputType | null
    _avg: ProductsAvgAggregateOutputType | null
    _sum: ProductsSumAggregateOutputType | null
    _min: ProductsMinAggregateOutputType | null
    _max: ProductsMaxAggregateOutputType | null
  }

  type GetProductsGroupByPayload<T extends ProductsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ProductsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProductsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProductsGroupByOutputType[P]>
            : GetScalarType<T[P], ProductsGroupByOutputType[P]>
        }
      >
    >


  export type ProductsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    userId?: boolean
    price?: boolean
    code?: boolean
    Cor?: boolean
    Peso?: boolean
    user?: boolean | Products$userArgs<ExtArgs>
  }, ExtArgs["result"]["products"]>

  export type ProductsSelectScalar = {
    id?: boolean
    name?: boolean
    userId?: boolean
    price?: boolean
    code?: boolean
    Cor?: boolean
    Peso?: boolean
  }

  export type ProductsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | Products$userArgs<ExtArgs>
  }


  export type $ProductsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Products"
    objects: {
      user: Prisma.$CreateUserPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      userId: number | null
      price: string
      code: string
      Cor: string
      Peso: string
    }, ExtArgs["result"]["products"]>
    composites: {}
  }


  type ProductsGetPayload<S extends boolean | null | undefined | ProductsDefaultArgs> = $Result.GetResult<Prisma.$ProductsPayload, S>

  type ProductsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ProductsFindManyArgs, 'select' | 'include' | 'distinct' > & {
      select?: ProductsCountAggregateInputType | true
    }

  export interface ProductsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Products'], meta: { name: 'Products' } }
    /**
     * Find zero or one Products that matches the filter.
     * @param {ProductsFindUniqueArgs} args - Arguments to find a Products
     * @example
     * // Get one Products
     * const products = await prisma.products.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ProductsFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, ProductsFindUniqueArgs<ExtArgs>>
    ): Prisma__ProductsClient<$Result.GetResult<Prisma.$ProductsPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Products that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {ProductsFindUniqueOrThrowArgs} args - Arguments to find a Products
     * @example
     * // Get one Products
     * const products = await prisma.products.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ProductsFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ProductsFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__ProductsClient<$Result.GetResult<Prisma.$ProductsPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Products that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductsFindFirstArgs} args - Arguments to find a Products
     * @example
     * // Get one Products
     * const products = await prisma.products.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ProductsFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, ProductsFindFirstArgs<ExtArgs>>
    ): Prisma__ProductsClient<$Result.GetResult<Prisma.$ProductsPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Products that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductsFindFirstOrThrowArgs} args - Arguments to find a Products
     * @example
     * // Get one Products
     * const products = await prisma.products.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ProductsFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ProductsFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__ProductsClient<$Result.GetResult<Prisma.$ProductsPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Products that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductsFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Products
     * const products = await prisma.products.findMany()
     * 
     * // Get first 10 Products
     * const products = await prisma.products.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const productsWithIdOnly = await prisma.products.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ProductsFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ProductsFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProductsPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Products.
     * @param {ProductsCreateArgs} args - Arguments to create a Products.
     * @example
     * // Create one Products
     * const Products = await prisma.products.create({
     *   data: {
     *     // ... data to create a Products
     *   }
     * })
     * 
    **/
    create<T extends ProductsCreateArgs<ExtArgs>>(
      args: SelectSubset<T, ProductsCreateArgs<ExtArgs>>
    ): Prisma__ProductsClient<$Result.GetResult<Prisma.$ProductsPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Products.
     *     @param {ProductsCreateManyArgs} args - Arguments to create many Products.
     *     @example
     *     // Create many Products
     *     const products = await prisma.products.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ProductsCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ProductsCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Products.
     * @param {ProductsDeleteArgs} args - Arguments to delete one Products.
     * @example
     * // Delete one Products
     * const Products = await prisma.products.delete({
     *   where: {
     *     // ... filter to delete one Products
     *   }
     * })
     * 
    **/
    delete<T extends ProductsDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, ProductsDeleteArgs<ExtArgs>>
    ): Prisma__ProductsClient<$Result.GetResult<Prisma.$ProductsPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Products.
     * @param {ProductsUpdateArgs} args - Arguments to update one Products.
     * @example
     * // Update one Products
     * const products = await prisma.products.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ProductsUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, ProductsUpdateArgs<ExtArgs>>
    ): Prisma__ProductsClient<$Result.GetResult<Prisma.$ProductsPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Products.
     * @param {ProductsDeleteManyArgs} args - Arguments to filter Products to delete.
     * @example
     * // Delete a few Products
     * const { count } = await prisma.products.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ProductsDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ProductsDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Products.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Products
     * const products = await prisma.products.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ProductsUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, ProductsUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Products.
     * @param {ProductsUpsertArgs} args - Arguments to update or create a Products.
     * @example
     * // Update or create a Products
     * const products = await prisma.products.upsert({
     *   create: {
     *     // ... data to create a Products
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Products we want to update
     *   }
     * })
    **/
    upsert<T extends ProductsUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, ProductsUpsertArgs<ExtArgs>>
    ): Prisma__ProductsClient<$Result.GetResult<Prisma.$ProductsPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Products.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductsCountArgs} args - Arguments to filter Products to count.
     * @example
     * // Count the number of Products
     * const count = await prisma.products.count({
     *   where: {
     *     // ... the filter for the Products we want to count
     *   }
     * })
    **/
    count<T extends ProductsCountArgs>(
      args?: Subset<T, ProductsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProductsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Products.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProductsAggregateArgs>(args: Subset<T, ProductsAggregateArgs>): Prisma.PrismaPromise<GetProductsAggregateType<T>>

    /**
     * Group by Products.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ProductsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ProductsGroupByArgs['orderBy'] }
        : { orderBy?: ProductsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ProductsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProductsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Products model
   */
  readonly fields: ProductsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Products.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ProductsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    user<T extends Products$userArgs<ExtArgs> = {}>(args?: Subset<T, Products$userArgs<ExtArgs>>): Prisma__CreateUserClient<$Result.GetResult<Prisma.$CreateUserPayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Products model
   */ 
  interface ProductsFieldRefs {
    readonly id: FieldRef<"Products", 'Int'>
    readonly name: FieldRef<"Products", 'String'>
    readonly userId: FieldRef<"Products", 'Int'>
    readonly price: FieldRef<"Products", 'String'>
    readonly code: FieldRef<"Products", 'String'>
    readonly Cor: FieldRef<"Products", 'String'>
    readonly Peso: FieldRef<"Products", 'String'>
  }
    

  // Custom InputTypes

  /**
   * Products findUnique
   */
  export type ProductsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Products
     */
    select?: ProductsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProductsInclude<ExtArgs> | null
    /**
     * Filter, which Products to fetch.
     */
    where: ProductsWhereUniqueInput
  }


  /**
   * Products findUniqueOrThrow
   */
  export type ProductsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Products
     */
    select?: ProductsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProductsInclude<ExtArgs> | null
    /**
     * Filter, which Products to fetch.
     */
    where: ProductsWhereUniqueInput
  }


  /**
   * Products findFirst
   */
  export type ProductsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Products
     */
    select?: ProductsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProductsInclude<ExtArgs> | null
    /**
     * Filter, which Products to fetch.
     */
    where?: ProductsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Products to fetch.
     */
    orderBy?: ProductsOrderByWithRelationInput | ProductsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Products.
     */
    cursor?: ProductsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Products from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Products.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Products.
     */
    distinct?: ProductsScalarFieldEnum | ProductsScalarFieldEnum[]
  }


  /**
   * Products findFirstOrThrow
   */
  export type ProductsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Products
     */
    select?: ProductsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProductsInclude<ExtArgs> | null
    /**
     * Filter, which Products to fetch.
     */
    where?: ProductsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Products to fetch.
     */
    orderBy?: ProductsOrderByWithRelationInput | ProductsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Products.
     */
    cursor?: ProductsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Products from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Products.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Products.
     */
    distinct?: ProductsScalarFieldEnum | ProductsScalarFieldEnum[]
  }


  /**
   * Products findMany
   */
  export type ProductsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Products
     */
    select?: ProductsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProductsInclude<ExtArgs> | null
    /**
     * Filter, which Products to fetch.
     */
    where?: ProductsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Products to fetch.
     */
    orderBy?: ProductsOrderByWithRelationInput | ProductsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Products.
     */
    cursor?: ProductsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Products from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Products.
     */
    skip?: number
    distinct?: ProductsScalarFieldEnum | ProductsScalarFieldEnum[]
  }


  /**
   * Products create
   */
  export type ProductsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Products
     */
    select?: ProductsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProductsInclude<ExtArgs> | null
    /**
     * The data needed to create a Products.
     */
    data: XOR<ProductsCreateInput, ProductsUncheckedCreateInput>
  }


  /**
   * Products createMany
   */
  export type ProductsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Products.
     */
    data: ProductsCreateManyInput | ProductsCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Products update
   */
  export type ProductsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Products
     */
    select?: ProductsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProductsInclude<ExtArgs> | null
    /**
     * The data needed to update a Products.
     */
    data: XOR<ProductsUpdateInput, ProductsUncheckedUpdateInput>
    /**
     * Choose, which Products to update.
     */
    where: ProductsWhereUniqueInput
  }


  /**
   * Products updateMany
   */
  export type ProductsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Products.
     */
    data: XOR<ProductsUpdateManyMutationInput, ProductsUncheckedUpdateManyInput>
    /**
     * Filter which Products to update
     */
    where?: ProductsWhereInput
  }


  /**
   * Products upsert
   */
  export type ProductsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Products
     */
    select?: ProductsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProductsInclude<ExtArgs> | null
    /**
     * The filter to search for the Products to update in case it exists.
     */
    where: ProductsWhereUniqueInput
    /**
     * In case the Products found by the `where` argument doesn't exist, create a new Products with this data.
     */
    create: XOR<ProductsCreateInput, ProductsUncheckedCreateInput>
    /**
     * In case the Products was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ProductsUpdateInput, ProductsUncheckedUpdateInput>
  }


  /**
   * Products delete
   */
  export type ProductsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Products
     */
    select?: ProductsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProductsInclude<ExtArgs> | null
    /**
     * Filter which Products to delete.
     */
    where: ProductsWhereUniqueInput
  }


  /**
   * Products deleteMany
   */
  export type ProductsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Products to delete
     */
    where?: ProductsWhereInput
  }


  /**
   * Products.user
   */
  export type Products$userArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CreateUser
     */
    select?: CreateUserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CreateUserInclude<ExtArgs> | null
    where?: CreateUserWhereInput
  }


  /**
   * Products without action
   */
  export type ProductsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Products
     */
    select?: ProductsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProductsInclude<ExtArgs> | null
  }



  /**
   * Model RegisterSales
   */

  export type AggregateRegisterSales = {
    _count: RegisterSalesCountAggregateOutputType | null
    _avg: RegisterSalesAvgAggregateOutputType | null
    _sum: RegisterSalesSumAggregateOutputType | null
    _min: RegisterSalesMinAggregateOutputType | null
    _max: RegisterSalesMaxAggregateOutputType | null
  }

  export type RegisterSalesAvgAggregateOutputType = {
    id: number | null
    userId: number | null
    quantity: number | null
    monthlyTarget: number | null
  }

  export type RegisterSalesSumAggregateOutputType = {
    id: number | null
    userId: number | null
    quantity: number | null
    monthlyTarget: number | null
  }

  export type RegisterSalesMinAggregateOutputType = {
    id: number | null
    name: string | null
    userId: number | null
    date: string | null
    quantity: number | null
    monthlyTarget: number | null
    code: string | null
    seller: string | null
  }

  export type RegisterSalesMaxAggregateOutputType = {
    id: number | null
    name: string | null
    userId: number | null
    date: string | null
    quantity: number | null
    monthlyTarget: number | null
    code: string | null
    seller: string | null
  }

  export type RegisterSalesCountAggregateOutputType = {
    id: number
    name: number
    userId: number
    date: number
    quantity: number
    monthlyTarget: number
    code: number
    seller: number
    _all: number
  }


  export type RegisterSalesAvgAggregateInputType = {
    id?: true
    userId?: true
    quantity?: true
    monthlyTarget?: true
  }

  export type RegisterSalesSumAggregateInputType = {
    id?: true
    userId?: true
    quantity?: true
    monthlyTarget?: true
  }

  export type RegisterSalesMinAggregateInputType = {
    id?: true
    name?: true
    userId?: true
    date?: true
    quantity?: true
    monthlyTarget?: true
    code?: true
    seller?: true
  }

  export type RegisterSalesMaxAggregateInputType = {
    id?: true
    name?: true
    userId?: true
    date?: true
    quantity?: true
    monthlyTarget?: true
    code?: true
    seller?: true
  }

  export type RegisterSalesCountAggregateInputType = {
    id?: true
    name?: true
    userId?: true
    date?: true
    quantity?: true
    monthlyTarget?: true
    code?: true
    seller?: true
    _all?: true
  }

  export type RegisterSalesAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which RegisterSales to aggregate.
     */
    where?: RegisterSalesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RegisterSales to fetch.
     */
    orderBy?: RegisterSalesOrderByWithRelationInput | RegisterSalesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: RegisterSalesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RegisterSales from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RegisterSales.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned RegisterSales
    **/
    _count?: true | RegisterSalesCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: RegisterSalesAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: RegisterSalesSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RegisterSalesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RegisterSalesMaxAggregateInputType
  }

  export type GetRegisterSalesAggregateType<T extends RegisterSalesAggregateArgs> = {
        [P in keyof T & keyof AggregateRegisterSales]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRegisterSales[P]>
      : GetScalarType<T[P], AggregateRegisterSales[P]>
  }




  export type RegisterSalesGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RegisterSalesWhereInput
    orderBy?: RegisterSalesOrderByWithAggregationInput | RegisterSalesOrderByWithAggregationInput[]
    by: RegisterSalesScalarFieldEnum[] | RegisterSalesScalarFieldEnum
    having?: RegisterSalesScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RegisterSalesCountAggregateInputType | true
    _avg?: RegisterSalesAvgAggregateInputType
    _sum?: RegisterSalesSumAggregateInputType
    _min?: RegisterSalesMinAggregateInputType
    _max?: RegisterSalesMaxAggregateInputType
  }

  export type RegisterSalesGroupByOutputType = {
    id: number
    name: string
    userId: number | null
    date: string
    quantity: number
    monthlyTarget: number
    code: string
    seller: string
    _count: RegisterSalesCountAggregateOutputType | null
    _avg: RegisterSalesAvgAggregateOutputType | null
    _sum: RegisterSalesSumAggregateOutputType | null
    _min: RegisterSalesMinAggregateOutputType | null
    _max: RegisterSalesMaxAggregateOutputType | null
  }

  type GetRegisterSalesGroupByPayload<T extends RegisterSalesGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<RegisterSalesGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RegisterSalesGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RegisterSalesGroupByOutputType[P]>
            : GetScalarType<T[P], RegisterSalesGroupByOutputType[P]>
        }
      >
    >


  export type RegisterSalesSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    userId?: boolean
    date?: boolean
    quantity?: boolean
    monthlyTarget?: boolean
    code?: boolean
    seller?: boolean
    user?: boolean | RegisterSales$userArgs<ExtArgs>
  }, ExtArgs["result"]["registerSales"]>

  export type RegisterSalesSelectScalar = {
    id?: boolean
    name?: boolean
    userId?: boolean
    date?: boolean
    quantity?: boolean
    monthlyTarget?: boolean
    code?: boolean
    seller?: boolean
  }

  export type RegisterSalesInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | RegisterSales$userArgs<ExtArgs>
  }


  export type $RegisterSalesPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "RegisterSales"
    objects: {
      user: Prisma.$CreateUserPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      userId: number | null
      date: string
      quantity: number
      monthlyTarget: number
      code: string
      seller: string
    }, ExtArgs["result"]["registerSales"]>
    composites: {}
  }


  type RegisterSalesGetPayload<S extends boolean | null | undefined | RegisterSalesDefaultArgs> = $Result.GetResult<Prisma.$RegisterSalesPayload, S>

  type RegisterSalesCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<RegisterSalesFindManyArgs, 'select' | 'include' | 'distinct' > & {
      select?: RegisterSalesCountAggregateInputType | true
    }

  export interface RegisterSalesDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['RegisterSales'], meta: { name: 'RegisterSales' } }
    /**
     * Find zero or one RegisterSales that matches the filter.
     * @param {RegisterSalesFindUniqueArgs} args - Arguments to find a RegisterSales
     * @example
     * // Get one RegisterSales
     * const registerSales = await prisma.registerSales.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends RegisterSalesFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, RegisterSalesFindUniqueArgs<ExtArgs>>
    ): Prisma__RegisterSalesClient<$Result.GetResult<Prisma.$RegisterSalesPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one RegisterSales that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {RegisterSalesFindUniqueOrThrowArgs} args - Arguments to find a RegisterSales
     * @example
     * // Get one RegisterSales
     * const registerSales = await prisma.registerSales.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends RegisterSalesFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, RegisterSalesFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__RegisterSalesClient<$Result.GetResult<Prisma.$RegisterSalesPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first RegisterSales that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RegisterSalesFindFirstArgs} args - Arguments to find a RegisterSales
     * @example
     * // Get one RegisterSales
     * const registerSales = await prisma.registerSales.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends RegisterSalesFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, RegisterSalesFindFirstArgs<ExtArgs>>
    ): Prisma__RegisterSalesClient<$Result.GetResult<Prisma.$RegisterSalesPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first RegisterSales that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RegisterSalesFindFirstOrThrowArgs} args - Arguments to find a RegisterSales
     * @example
     * // Get one RegisterSales
     * const registerSales = await prisma.registerSales.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends RegisterSalesFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, RegisterSalesFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__RegisterSalesClient<$Result.GetResult<Prisma.$RegisterSalesPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more RegisterSales that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RegisterSalesFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all RegisterSales
     * const registerSales = await prisma.registerSales.findMany()
     * 
     * // Get first 10 RegisterSales
     * const registerSales = await prisma.registerSales.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const registerSalesWithIdOnly = await prisma.registerSales.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends RegisterSalesFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, RegisterSalesFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RegisterSalesPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a RegisterSales.
     * @param {RegisterSalesCreateArgs} args - Arguments to create a RegisterSales.
     * @example
     * // Create one RegisterSales
     * const RegisterSales = await prisma.registerSales.create({
     *   data: {
     *     // ... data to create a RegisterSales
     *   }
     * })
     * 
    **/
    create<T extends RegisterSalesCreateArgs<ExtArgs>>(
      args: SelectSubset<T, RegisterSalesCreateArgs<ExtArgs>>
    ): Prisma__RegisterSalesClient<$Result.GetResult<Prisma.$RegisterSalesPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many RegisterSales.
     *     @param {RegisterSalesCreateManyArgs} args - Arguments to create many RegisterSales.
     *     @example
     *     // Create many RegisterSales
     *     const registerSales = await prisma.registerSales.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends RegisterSalesCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, RegisterSalesCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a RegisterSales.
     * @param {RegisterSalesDeleteArgs} args - Arguments to delete one RegisterSales.
     * @example
     * // Delete one RegisterSales
     * const RegisterSales = await prisma.registerSales.delete({
     *   where: {
     *     // ... filter to delete one RegisterSales
     *   }
     * })
     * 
    **/
    delete<T extends RegisterSalesDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, RegisterSalesDeleteArgs<ExtArgs>>
    ): Prisma__RegisterSalesClient<$Result.GetResult<Prisma.$RegisterSalesPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one RegisterSales.
     * @param {RegisterSalesUpdateArgs} args - Arguments to update one RegisterSales.
     * @example
     * // Update one RegisterSales
     * const registerSales = await prisma.registerSales.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends RegisterSalesUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, RegisterSalesUpdateArgs<ExtArgs>>
    ): Prisma__RegisterSalesClient<$Result.GetResult<Prisma.$RegisterSalesPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more RegisterSales.
     * @param {RegisterSalesDeleteManyArgs} args - Arguments to filter RegisterSales to delete.
     * @example
     * // Delete a few RegisterSales
     * const { count } = await prisma.registerSales.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends RegisterSalesDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, RegisterSalesDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more RegisterSales.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RegisterSalesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many RegisterSales
     * const registerSales = await prisma.registerSales.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends RegisterSalesUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, RegisterSalesUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one RegisterSales.
     * @param {RegisterSalesUpsertArgs} args - Arguments to update or create a RegisterSales.
     * @example
     * // Update or create a RegisterSales
     * const registerSales = await prisma.registerSales.upsert({
     *   create: {
     *     // ... data to create a RegisterSales
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the RegisterSales we want to update
     *   }
     * })
    **/
    upsert<T extends RegisterSalesUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, RegisterSalesUpsertArgs<ExtArgs>>
    ): Prisma__RegisterSalesClient<$Result.GetResult<Prisma.$RegisterSalesPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of RegisterSales.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RegisterSalesCountArgs} args - Arguments to filter RegisterSales to count.
     * @example
     * // Count the number of RegisterSales
     * const count = await prisma.registerSales.count({
     *   where: {
     *     // ... the filter for the RegisterSales we want to count
     *   }
     * })
    **/
    count<T extends RegisterSalesCountArgs>(
      args?: Subset<T, RegisterSalesCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RegisterSalesCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a RegisterSales.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RegisterSalesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RegisterSalesAggregateArgs>(args: Subset<T, RegisterSalesAggregateArgs>): Prisma.PrismaPromise<GetRegisterSalesAggregateType<T>>

    /**
     * Group by RegisterSales.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RegisterSalesGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends RegisterSalesGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: RegisterSalesGroupByArgs['orderBy'] }
        : { orderBy?: RegisterSalesGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, RegisterSalesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRegisterSalesGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the RegisterSales model
   */
  readonly fields: RegisterSalesFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for RegisterSales.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__RegisterSalesClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    user<T extends RegisterSales$userArgs<ExtArgs> = {}>(args?: Subset<T, RegisterSales$userArgs<ExtArgs>>): Prisma__CreateUserClient<$Result.GetResult<Prisma.$CreateUserPayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the RegisterSales model
   */ 
  interface RegisterSalesFieldRefs {
    readonly id: FieldRef<"RegisterSales", 'Int'>
    readonly name: FieldRef<"RegisterSales", 'String'>
    readonly userId: FieldRef<"RegisterSales", 'Int'>
    readonly date: FieldRef<"RegisterSales", 'String'>
    readonly quantity: FieldRef<"RegisterSales", 'Int'>
    readonly monthlyTarget: FieldRef<"RegisterSales", 'Int'>
    readonly code: FieldRef<"RegisterSales", 'String'>
    readonly seller: FieldRef<"RegisterSales", 'String'>
  }
    

  // Custom InputTypes

  /**
   * RegisterSales findUnique
   */
  export type RegisterSalesFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RegisterSales
     */
    select?: RegisterSalesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RegisterSalesInclude<ExtArgs> | null
    /**
     * Filter, which RegisterSales to fetch.
     */
    where: RegisterSalesWhereUniqueInput
  }


  /**
   * RegisterSales findUniqueOrThrow
   */
  export type RegisterSalesFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RegisterSales
     */
    select?: RegisterSalesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RegisterSalesInclude<ExtArgs> | null
    /**
     * Filter, which RegisterSales to fetch.
     */
    where: RegisterSalesWhereUniqueInput
  }


  /**
   * RegisterSales findFirst
   */
  export type RegisterSalesFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RegisterSales
     */
    select?: RegisterSalesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RegisterSalesInclude<ExtArgs> | null
    /**
     * Filter, which RegisterSales to fetch.
     */
    where?: RegisterSalesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RegisterSales to fetch.
     */
    orderBy?: RegisterSalesOrderByWithRelationInput | RegisterSalesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for RegisterSales.
     */
    cursor?: RegisterSalesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RegisterSales from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RegisterSales.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of RegisterSales.
     */
    distinct?: RegisterSalesScalarFieldEnum | RegisterSalesScalarFieldEnum[]
  }


  /**
   * RegisterSales findFirstOrThrow
   */
  export type RegisterSalesFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RegisterSales
     */
    select?: RegisterSalesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RegisterSalesInclude<ExtArgs> | null
    /**
     * Filter, which RegisterSales to fetch.
     */
    where?: RegisterSalesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RegisterSales to fetch.
     */
    orderBy?: RegisterSalesOrderByWithRelationInput | RegisterSalesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for RegisterSales.
     */
    cursor?: RegisterSalesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RegisterSales from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RegisterSales.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of RegisterSales.
     */
    distinct?: RegisterSalesScalarFieldEnum | RegisterSalesScalarFieldEnum[]
  }


  /**
   * RegisterSales findMany
   */
  export type RegisterSalesFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RegisterSales
     */
    select?: RegisterSalesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RegisterSalesInclude<ExtArgs> | null
    /**
     * Filter, which RegisterSales to fetch.
     */
    where?: RegisterSalesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RegisterSales to fetch.
     */
    orderBy?: RegisterSalesOrderByWithRelationInput | RegisterSalesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing RegisterSales.
     */
    cursor?: RegisterSalesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RegisterSales from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RegisterSales.
     */
    skip?: number
    distinct?: RegisterSalesScalarFieldEnum | RegisterSalesScalarFieldEnum[]
  }


  /**
   * RegisterSales create
   */
  export type RegisterSalesCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RegisterSales
     */
    select?: RegisterSalesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RegisterSalesInclude<ExtArgs> | null
    /**
     * The data needed to create a RegisterSales.
     */
    data: XOR<RegisterSalesCreateInput, RegisterSalesUncheckedCreateInput>
  }


  /**
   * RegisterSales createMany
   */
  export type RegisterSalesCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many RegisterSales.
     */
    data: RegisterSalesCreateManyInput | RegisterSalesCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * RegisterSales update
   */
  export type RegisterSalesUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RegisterSales
     */
    select?: RegisterSalesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RegisterSalesInclude<ExtArgs> | null
    /**
     * The data needed to update a RegisterSales.
     */
    data: XOR<RegisterSalesUpdateInput, RegisterSalesUncheckedUpdateInput>
    /**
     * Choose, which RegisterSales to update.
     */
    where: RegisterSalesWhereUniqueInput
  }


  /**
   * RegisterSales updateMany
   */
  export type RegisterSalesUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update RegisterSales.
     */
    data: XOR<RegisterSalesUpdateManyMutationInput, RegisterSalesUncheckedUpdateManyInput>
    /**
     * Filter which RegisterSales to update
     */
    where?: RegisterSalesWhereInput
  }


  /**
   * RegisterSales upsert
   */
  export type RegisterSalesUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RegisterSales
     */
    select?: RegisterSalesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RegisterSalesInclude<ExtArgs> | null
    /**
     * The filter to search for the RegisterSales to update in case it exists.
     */
    where: RegisterSalesWhereUniqueInput
    /**
     * In case the RegisterSales found by the `where` argument doesn't exist, create a new RegisterSales with this data.
     */
    create: XOR<RegisterSalesCreateInput, RegisterSalesUncheckedCreateInput>
    /**
     * In case the RegisterSales was found with the provided `where` argument, update it with this data.
     */
    update: XOR<RegisterSalesUpdateInput, RegisterSalesUncheckedUpdateInput>
  }


  /**
   * RegisterSales delete
   */
  export type RegisterSalesDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RegisterSales
     */
    select?: RegisterSalesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RegisterSalesInclude<ExtArgs> | null
    /**
     * Filter which RegisterSales to delete.
     */
    where: RegisterSalesWhereUniqueInput
  }


  /**
   * RegisterSales deleteMany
   */
  export type RegisterSalesDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which RegisterSales to delete
     */
    where?: RegisterSalesWhereInput
  }


  /**
   * RegisterSales.user
   */
  export type RegisterSales$userArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CreateUser
     */
    select?: CreateUserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CreateUserInclude<ExtArgs> | null
    where?: CreateUserWhereInput
  }


  /**
   * RegisterSales without action
   */
  export type RegisterSalesDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RegisterSales
     */
    select?: RegisterSalesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RegisterSalesInclude<ExtArgs> | null
  }



  /**
   * Model CreateUser
   */

  export type AggregateCreateUser = {
    _count: CreateUserCountAggregateOutputType | null
    _avg: CreateUserAvgAggregateOutputType | null
    _sum: CreateUserSumAggregateOutputType | null
    _min: CreateUserMinAggregateOutputType | null
    _max: CreateUserMaxAggregateOutputType | null
  }

  export type CreateUserAvgAggregateOutputType = {
    id: number | null
  }

  export type CreateUserSumAggregateOutputType = {
    id: number | null
  }

  export type CreateUserMinAggregateOutputType = {
    id: number | null
    email: string | null
    password: string | null
    admin: boolean | null
  }

  export type CreateUserMaxAggregateOutputType = {
    id: number | null
    email: string | null
    password: string | null
    admin: boolean | null
  }

  export type CreateUserCountAggregateOutputType = {
    id: number
    email: number
    password: number
    admin: number
    _all: number
  }


  export type CreateUserAvgAggregateInputType = {
    id?: true
  }

  export type CreateUserSumAggregateInputType = {
    id?: true
  }

  export type CreateUserMinAggregateInputType = {
    id?: true
    email?: true
    password?: true
    admin?: true
  }

  export type CreateUserMaxAggregateInputType = {
    id?: true
    email?: true
    password?: true
    admin?: true
  }

  export type CreateUserCountAggregateInputType = {
    id?: true
    email?: true
    password?: true
    admin?: true
    _all?: true
  }

  export type CreateUserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CreateUser to aggregate.
     */
    where?: CreateUserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CreateUsers to fetch.
     */
    orderBy?: CreateUserOrderByWithRelationInput | CreateUserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CreateUserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CreateUsers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CreateUsers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned CreateUsers
    **/
    _count?: true | CreateUserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CreateUserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CreateUserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CreateUserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CreateUserMaxAggregateInputType
  }

  export type GetCreateUserAggregateType<T extends CreateUserAggregateArgs> = {
        [P in keyof T & keyof AggregateCreateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCreateUser[P]>
      : GetScalarType<T[P], AggregateCreateUser[P]>
  }




  export type CreateUserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CreateUserWhereInput
    orderBy?: CreateUserOrderByWithAggregationInput | CreateUserOrderByWithAggregationInput[]
    by: CreateUserScalarFieldEnum[] | CreateUserScalarFieldEnum
    having?: CreateUserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CreateUserCountAggregateInputType | true
    _avg?: CreateUserAvgAggregateInputType
    _sum?: CreateUserSumAggregateInputType
    _min?: CreateUserMinAggregateInputType
    _max?: CreateUserMaxAggregateInputType
  }

  export type CreateUserGroupByOutputType = {
    id: number
    email: string
    password: string
    admin: boolean
    _count: CreateUserCountAggregateOutputType | null
    _avg: CreateUserAvgAggregateOutputType | null
    _sum: CreateUserSumAggregateOutputType | null
    _min: CreateUserMinAggregateOutputType | null
    _max: CreateUserMaxAggregateOutputType | null
  }

  type GetCreateUserGroupByPayload<T extends CreateUserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CreateUserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CreateUserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CreateUserGroupByOutputType[P]>
            : GetScalarType<T[P], CreateUserGroupByOutputType[P]>
        }
      >
    >


  export type CreateUserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    password?: boolean
    admin?: boolean
    products?: boolean | CreateUser$productsArgs<ExtArgs>
    RegisterSales?: boolean | CreateUser$RegisterSalesArgs<ExtArgs>
    _count?: boolean | CreateUserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["createUser"]>

  export type CreateUserSelectScalar = {
    id?: boolean
    email?: boolean
    password?: boolean
    admin?: boolean
  }

  export type CreateUserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    products?: boolean | CreateUser$productsArgs<ExtArgs>
    RegisterSales?: boolean | CreateUser$RegisterSalesArgs<ExtArgs>
    _count?: boolean | CreateUserCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $CreateUserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "CreateUser"
    objects: {
      products: Prisma.$ProductsPayload<ExtArgs>[]
      RegisterSales: Prisma.$RegisterSalesPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      email: string
      password: string
      admin: boolean
    }, ExtArgs["result"]["createUser"]>
    composites: {}
  }


  type CreateUserGetPayload<S extends boolean | null | undefined | CreateUserDefaultArgs> = $Result.GetResult<Prisma.$CreateUserPayload, S>

  type CreateUserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<CreateUserFindManyArgs, 'select' | 'include' | 'distinct' > & {
      select?: CreateUserCountAggregateInputType | true
    }

  export interface CreateUserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['CreateUser'], meta: { name: 'CreateUser' } }
    /**
     * Find zero or one CreateUser that matches the filter.
     * @param {CreateUserFindUniqueArgs} args - Arguments to find a CreateUser
     * @example
     * // Get one CreateUser
     * const createUser = await prisma.createUser.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends CreateUserFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, CreateUserFindUniqueArgs<ExtArgs>>
    ): Prisma__CreateUserClient<$Result.GetResult<Prisma.$CreateUserPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one CreateUser that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {CreateUserFindUniqueOrThrowArgs} args - Arguments to find a CreateUser
     * @example
     * // Get one CreateUser
     * const createUser = await prisma.createUser.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends CreateUserFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, CreateUserFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__CreateUserClient<$Result.GetResult<Prisma.$CreateUserPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first CreateUser that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CreateUserFindFirstArgs} args - Arguments to find a CreateUser
     * @example
     * // Get one CreateUser
     * const createUser = await prisma.createUser.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends CreateUserFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, CreateUserFindFirstArgs<ExtArgs>>
    ): Prisma__CreateUserClient<$Result.GetResult<Prisma.$CreateUserPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first CreateUser that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CreateUserFindFirstOrThrowArgs} args - Arguments to find a CreateUser
     * @example
     * // Get one CreateUser
     * const createUser = await prisma.createUser.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends CreateUserFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, CreateUserFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__CreateUserClient<$Result.GetResult<Prisma.$CreateUserPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more CreateUsers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CreateUserFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all CreateUsers
     * const createUsers = await prisma.createUser.findMany()
     * 
     * // Get first 10 CreateUsers
     * const createUsers = await prisma.createUser.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const createUserWithIdOnly = await prisma.createUser.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends CreateUserFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, CreateUserFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CreateUserPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a CreateUser.
     * @param {CreateUserCreateArgs} args - Arguments to create a CreateUser.
     * @example
     * // Create one CreateUser
     * const CreateUser = await prisma.createUser.create({
     *   data: {
     *     // ... data to create a CreateUser
     *   }
     * })
     * 
    **/
    create<T extends CreateUserCreateArgs<ExtArgs>>(
      args: SelectSubset<T, CreateUserCreateArgs<ExtArgs>>
    ): Prisma__CreateUserClient<$Result.GetResult<Prisma.$CreateUserPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many CreateUsers.
     *     @param {CreateUserCreateManyArgs} args - Arguments to create many CreateUsers.
     *     @example
     *     // Create many CreateUsers
     *     const createUser = await prisma.createUser.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends CreateUserCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, CreateUserCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a CreateUser.
     * @param {CreateUserDeleteArgs} args - Arguments to delete one CreateUser.
     * @example
     * // Delete one CreateUser
     * const CreateUser = await prisma.createUser.delete({
     *   where: {
     *     // ... filter to delete one CreateUser
     *   }
     * })
     * 
    **/
    delete<T extends CreateUserDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, CreateUserDeleteArgs<ExtArgs>>
    ): Prisma__CreateUserClient<$Result.GetResult<Prisma.$CreateUserPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one CreateUser.
     * @param {CreateUserUpdateArgs} args - Arguments to update one CreateUser.
     * @example
     * // Update one CreateUser
     * const createUser = await prisma.createUser.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends CreateUserUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, CreateUserUpdateArgs<ExtArgs>>
    ): Prisma__CreateUserClient<$Result.GetResult<Prisma.$CreateUserPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more CreateUsers.
     * @param {CreateUserDeleteManyArgs} args - Arguments to filter CreateUsers to delete.
     * @example
     * // Delete a few CreateUsers
     * const { count } = await prisma.createUser.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends CreateUserDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, CreateUserDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CreateUsers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CreateUserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many CreateUsers
     * const createUser = await prisma.createUser.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends CreateUserUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, CreateUserUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one CreateUser.
     * @param {CreateUserUpsertArgs} args - Arguments to update or create a CreateUser.
     * @example
     * // Update or create a CreateUser
     * const createUser = await prisma.createUser.upsert({
     *   create: {
     *     // ... data to create a CreateUser
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the CreateUser we want to update
     *   }
     * })
    **/
    upsert<T extends CreateUserUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, CreateUserUpsertArgs<ExtArgs>>
    ): Prisma__CreateUserClient<$Result.GetResult<Prisma.$CreateUserPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of CreateUsers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CreateUserCountArgs} args - Arguments to filter CreateUsers to count.
     * @example
     * // Count the number of CreateUsers
     * const count = await prisma.createUser.count({
     *   where: {
     *     // ... the filter for the CreateUsers we want to count
     *   }
     * })
    **/
    count<T extends CreateUserCountArgs>(
      args?: Subset<T, CreateUserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CreateUserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a CreateUser.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CreateUserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CreateUserAggregateArgs>(args: Subset<T, CreateUserAggregateArgs>): Prisma.PrismaPromise<GetCreateUserAggregateType<T>>

    /**
     * Group by CreateUser.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CreateUserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CreateUserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CreateUserGroupByArgs['orderBy'] }
        : { orderBy?: CreateUserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CreateUserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCreateUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the CreateUser model
   */
  readonly fields: CreateUserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for CreateUser.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CreateUserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    products<T extends CreateUser$productsArgs<ExtArgs> = {}>(args?: Subset<T, CreateUser$productsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProductsPayload<ExtArgs>, T, 'findMany'> | Null>;

    RegisterSales<T extends CreateUser$RegisterSalesArgs<ExtArgs> = {}>(args?: Subset<T, CreateUser$RegisterSalesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RegisterSalesPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the CreateUser model
   */ 
  interface CreateUserFieldRefs {
    readonly id: FieldRef<"CreateUser", 'Int'>
    readonly email: FieldRef<"CreateUser", 'String'>
    readonly password: FieldRef<"CreateUser", 'String'>
    readonly admin: FieldRef<"CreateUser", 'Boolean'>
  }
    

  // Custom InputTypes

  /**
   * CreateUser findUnique
   */
  export type CreateUserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CreateUser
     */
    select?: CreateUserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CreateUserInclude<ExtArgs> | null
    /**
     * Filter, which CreateUser to fetch.
     */
    where: CreateUserWhereUniqueInput
  }


  /**
   * CreateUser findUniqueOrThrow
   */
  export type CreateUserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CreateUser
     */
    select?: CreateUserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CreateUserInclude<ExtArgs> | null
    /**
     * Filter, which CreateUser to fetch.
     */
    where: CreateUserWhereUniqueInput
  }


  /**
   * CreateUser findFirst
   */
  export type CreateUserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CreateUser
     */
    select?: CreateUserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CreateUserInclude<ExtArgs> | null
    /**
     * Filter, which CreateUser to fetch.
     */
    where?: CreateUserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CreateUsers to fetch.
     */
    orderBy?: CreateUserOrderByWithRelationInput | CreateUserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CreateUsers.
     */
    cursor?: CreateUserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CreateUsers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CreateUsers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CreateUsers.
     */
    distinct?: CreateUserScalarFieldEnum | CreateUserScalarFieldEnum[]
  }


  /**
   * CreateUser findFirstOrThrow
   */
  export type CreateUserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CreateUser
     */
    select?: CreateUserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CreateUserInclude<ExtArgs> | null
    /**
     * Filter, which CreateUser to fetch.
     */
    where?: CreateUserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CreateUsers to fetch.
     */
    orderBy?: CreateUserOrderByWithRelationInput | CreateUserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CreateUsers.
     */
    cursor?: CreateUserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CreateUsers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CreateUsers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CreateUsers.
     */
    distinct?: CreateUserScalarFieldEnum | CreateUserScalarFieldEnum[]
  }


  /**
   * CreateUser findMany
   */
  export type CreateUserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CreateUser
     */
    select?: CreateUserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CreateUserInclude<ExtArgs> | null
    /**
     * Filter, which CreateUsers to fetch.
     */
    where?: CreateUserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CreateUsers to fetch.
     */
    orderBy?: CreateUserOrderByWithRelationInput | CreateUserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing CreateUsers.
     */
    cursor?: CreateUserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CreateUsers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CreateUsers.
     */
    skip?: number
    distinct?: CreateUserScalarFieldEnum | CreateUserScalarFieldEnum[]
  }


  /**
   * CreateUser create
   */
  export type CreateUserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CreateUser
     */
    select?: CreateUserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CreateUserInclude<ExtArgs> | null
    /**
     * The data needed to create a CreateUser.
     */
    data: XOR<CreateUserCreateInput, CreateUserUncheckedCreateInput>
  }


  /**
   * CreateUser createMany
   */
  export type CreateUserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many CreateUsers.
     */
    data: CreateUserCreateManyInput | CreateUserCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * CreateUser update
   */
  export type CreateUserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CreateUser
     */
    select?: CreateUserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CreateUserInclude<ExtArgs> | null
    /**
     * The data needed to update a CreateUser.
     */
    data: XOR<CreateUserUpdateInput, CreateUserUncheckedUpdateInput>
    /**
     * Choose, which CreateUser to update.
     */
    where: CreateUserWhereUniqueInput
  }


  /**
   * CreateUser updateMany
   */
  export type CreateUserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update CreateUsers.
     */
    data: XOR<CreateUserUpdateManyMutationInput, CreateUserUncheckedUpdateManyInput>
    /**
     * Filter which CreateUsers to update
     */
    where?: CreateUserWhereInput
  }


  /**
   * CreateUser upsert
   */
  export type CreateUserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CreateUser
     */
    select?: CreateUserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CreateUserInclude<ExtArgs> | null
    /**
     * The filter to search for the CreateUser to update in case it exists.
     */
    where: CreateUserWhereUniqueInput
    /**
     * In case the CreateUser found by the `where` argument doesn't exist, create a new CreateUser with this data.
     */
    create: XOR<CreateUserCreateInput, CreateUserUncheckedCreateInput>
    /**
     * In case the CreateUser was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CreateUserUpdateInput, CreateUserUncheckedUpdateInput>
  }


  /**
   * CreateUser delete
   */
  export type CreateUserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CreateUser
     */
    select?: CreateUserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CreateUserInclude<ExtArgs> | null
    /**
     * Filter which CreateUser to delete.
     */
    where: CreateUserWhereUniqueInput
  }


  /**
   * CreateUser deleteMany
   */
  export type CreateUserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CreateUsers to delete
     */
    where?: CreateUserWhereInput
  }


  /**
   * CreateUser.products
   */
  export type CreateUser$productsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Products
     */
    select?: ProductsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProductsInclude<ExtArgs> | null
    where?: ProductsWhereInput
    orderBy?: ProductsOrderByWithRelationInput | ProductsOrderByWithRelationInput[]
    cursor?: ProductsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ProductsScalarFieldEnum | ProductsScalarFieldEnum[]
  }


  /**
   * CreateUser.RegisterSales
   */
  export type CreateUser$RegisterSalesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RegisterSales
     */
    select?: RegisterSalesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RegisterSalesInclude<ExtArgs> | null
    where?: RegisterSalesWhereInput
    orderBy?: RegisterSalesOrderByWithRelationInput | RegisterSalesOrderByWithRelationInput[]
    cursor?: RegisterSalesWhereUniqueInput
    take?: number
    skip?: number
    distinct?: RegisterSalesScalarFieldEnum | RegisterSalesScalarFieldEnum[]
  }


  /**
   * CreateUser without action
   */
  export type CreateUserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CreateUser
     */
    select?: CreateUserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CreateUserInclude<ExtArgs> | null
  }



  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const ProductsScalarFieldEnum: {
    id: 'id',
    name: 'name',
    userId: 'userId',
    price: 'price',
    code: 'code',
    Cor: 'Cor',
    Peso: 'Peso'
  };

  export type ProductsScalarFieldEnum = (typeof ProductsScalarFieldEnum)[keyof typeof ProductsScalarFieldEnum]


  export const RegisterSalesScalarFieldEnum: {
    id: 'id',
    name: 'name',
    userId: 'userId',
    date: 'date',
    quantity: 'quantity',
    monthlyTarget: 'monthlyTarget',
    code: 'code',
    seller: 'seller'
  };

  export type RegisterSalesScalarFieldEnum = (typeof RegisterSalesScalarFieldEnum)[keyof typeof RegisterSalesScalarFieldEnum]


  export const CreateUserScalarFieldEnum: {
    id: 'id',
    email: 'email',
    password: 'password',
    admin: 'admin'
  };

  export type CreateUserScalarFieldEnum = (typeof CreateUserScalarFieldEnum)[keyof typeof CreateUserScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    
  /**
   * Deep Input Types
   */


  export type ProductsWhereInput = {
    AND?: ProductsWhereInput | ProductsWhereInput[]
    OR?: ProductsWhereInput[]
    NOT?: ProductsWhereInput | ProductsWhereInput[]
    id?: IntFilter<"Products"> | number
    name?: StringFilter<"Products"> | string
    userId?: IntNullableFilter<"Products"> | number | null
    price?: StringFilter<"Products"> | string
    code?: StringFilter<"Products"> | string
    Cor?: StringFilter<"Products"> | string
    Peso?: StringFilter<"Products"> | string
    user?: XOR<CreateUserNullableRelationFilter, CreateUserWhereInput> | null
  }

  export type ProductsOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    userId?: SortOrderInput | SortOrder
    price?: SortOrder
    code?: SortOrder
    Cor?: SortOrder
    Peso?: SortOrder
    user?: CreateUserOrderByWithRelationInput
  }

  export type ProductsWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: ProductsWhereInput | ProductsWhereInput[]
    OR?: ProductsWhereInput[]
    NOT?: ProductsWhereInput | ProductsWhereInput[]
    name?: StringFilter<"Products"> | string
    userId?: IntNullableFilter<"Products"> | number | null
    price?: StringFilter<"Products"> | string
    code?: StringFilter<"Products"> | string
    Cor?: StringFilter<"Products"> | string
    Peso?: StringFilter<"Products"> | string
    user?: XOR<CreateUserNullableRelationFilter, CreateUserWhereInput> | null
  }, "id">

  export type ProductsOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    userId?: SortOrderInput | SortOrder
    price?: SortOrder
    code?: SortOrder
    Cor?: SortOrder
    Peso?: SortOrder
    _count?: ProductsCountOrderByAggregateInput
    _avg?: ProductsAvgOrderByAggregateInput
    _max?: ProductsMaxOrderByAggregateInput
    _min?: ProductsMinOrderByAggregateInput
    _sum?: ProductsSumOrderByAggregateInput
  }

  export type ProductsScalarWhereWithAggregatesInput = {
    AND?: ProductsScalarWhereWithAggregatesInput | ProductsScalarWhereWithAggregatesInput[]
    OR?: ProductsScalarWhereWithAggregatesInput[]
    NOT?: ProductsScalarWhereWithAggregatesInput | ProductsScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Products"> | number
    name?: StringWithAggregatesFilter<"Products"> | string
    userId?: IntNullableWithAggregatesFilter<"Products"> | number | null
    price?: StringWithAggregatesFilter<"Products"> | string
    code?: StringWithAggregatesFilter<"Products"> | string
    Cor?: StringWithAggregatesFilter<"Products"> | string
    Peso?: StringWithAggregatesFilter<"Products"> | string
  }

  export type RegisterSalesWhereInput = {
    AND?: RegisterSalesWhereInput | RegisterSalesWhereInput[]
    OR?: RegisterSalesWhereInput[]
    NOT?: RegisterSalesWhereInput | RegisterSalesWhereInput[]
    id?: IntFilter<"RegisterSales"> | number
    name?: StringFilter<"RegisterSales"> | string
    userId?: IntNullableFilter<"RegisterSales"> | number | null
    date?: StringFilter<"RegisterSales"> | string
    quantity?: IntFilter<"RegisterSales"> | number
    monthlyTarget?: IntFilter<"RegisterSales"> | number
    code?: StringFilter<"RegisterSales"> | string
    seller?: StringFilter<"RegisterSales"> | string
    user?: XOR<CreateUserNullableRelationFilter, CreateUserWhereInput> | null
  }

  export type RegisterSalesOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    userId?: SortOrderInput | SortOrder
    date?: SortOrder
    quantity?: SortOrder
    monthlyTarget?: SortOrder
    code?: SortOrder
    seller?: SortOrder
    user?: CreateUserOrderByWithRelationInput
  }

  export type RegisterSalesWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: RegisterSalesWhereInput | RegisterSalesWhereInput[]
    OR?: RegisterSalesWhereInput[]
    NOT?: RegisterSalesWhereInput | RegisterSalesWhereInput[]
    name?: StringFilter<"RegisterSales"> | string
    userId?: IntNullableFilter<"RegisterSales"> | number | null
    date?: StringFilter<"RegisterSales"> | string
    quantity?: IntFilter<"RegisterSales"> | number
    monthlyTarget?: IntFilter<"RegisterSales"> | number
    code?: StringFilter<"RegisterSales"> | string
    seller?: StringFilter<"RegisterSales"> | string
    user?: XOR<CreateUserNullableRelationFilter, CreateUserWhereInput> | null
  }, "id">

  export type RegisterSalesOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    userId?: SortOrderInput | SortOrder
    date?: SortOrder
    quantity?: SortOrder
    monthlyTarget?: SortOrder
    code?: SortOrder
    seller?: SortOrder
    _count?: RegisterSalesCountOrderByAggregateInput
    _avg?: RegisterSalesAvgOrderByAggregateInput
    _max?: RegisterSalesMaxOrderByAggregateInput
    _min?: RegisterSalesMinOrderByAggregateInput
    _sum?: RegisterSalesSumOrderByAggregateInput
  }

  export type RegisterSalesScalarWhereWithAggregatesInput = {
    AND?: RegisterSalesScalarWhereWithAggregatesInput | RegisterSalesScalarWhereWithAggregatesInput[]
    OR?: RegisterSalesScalarWhereWithAggregatesInput[]
    NOT?: RegisterSalesScalarWhereWithAggregatesInput | RegisterSalesScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"RegisterSales"> | number
    name?: StringWithAggregatesFilter<"RegisterSales"> | string
    userId?: IntNullableWithAggregatesFilter<"RegisterSales"> | number | null
    date?: StringWithAggregatesFilter<"RegisterSales"> | string
    quantity?: IntWithAggregatesFilter<"RegisterSales"> | number
    monthlyTarget?: IntWithAggregatesFilter<"RegisterSales"> | number
    code?: StringWithAggregatesFilter<"RegisterSales"> | string
    seller?: StringWithAggregatesFilter<"RegisterSales"> | string
  }

  export type CreateUserWhereInput = {
    AND?: CreateUserWhereInput | CreateUserWhereInput[]
    OR?: CreateUserWhereInput[]
    NOT?: CreateUserWhereInput | CreateUserWhereInput[]
    id?: IntFilter<"CreateUser"> | number
    email?: StringFilter<"CreateUser"> | string
    password?: StringFilter<"CreateUser"> | string
    admin?: BoolFilter<"CreateUser"> | boolean
    products?: ProductsListRelationFilter
    RegisterSales?: RegisterSalesListRelationFilter
  }

  export type CreateUserOrderByWithRelationInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    admin?: SortOrder
    products?: ProductsOrderByRelationAggregateInput
    RegisterSales?: RegisterSalesOrderByRelationAggregateInput
  }

  export type CreateUserWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    email?: string
    AND?: CreateUserWhereInput | CreateUserWhereInput[]
    OR?: CreateUserWhereInput[]
    NOT?: CreateUserWhereInput | CreateUserWhereInput[]
    password?: StringFilter<"CreateUser"> | string
    admin?: BoolFilter<"CreateUser"> | boolean
    products?: ProductsListRelationFilter
    RegisterSales?: RegisterSalesListRelationFilter
  }, "id" | "email">

  export type CreateUserOrderByWithAggregationInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    admin?: SortOrder
    _count?: CreateUserCountOrderByAggregateInput
    _avg?: CreateUserAvgOrderByAggregateInput
    _max?: CreateUserMaxOrderByAggregateInput
    _min?: CreateUserMinOrderByAggregateInput
    _sum?: CreateUserSumOrderByAggregateInput
  }

  export type CreateUserScalarWhereWithAggregatesInput = {
    AND?: CreateUserScalarWhereWithAggregatesInput | CreateUserScalarWhereWithAggregatesInput[]
    OR?: CreateUserScalarWhereWithAggregatesInput[]
    NOT?: CreateUserScalarWhereWithAggregatesInput | CreateUserScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"CreateUser"> | number
    email?: StringWithAggregatesFilter<"CreateUser"> | string
    password?: StringWithAggregatesFilter<"CreateUser"> | string
    admin?: BoolWithAggregatesFilter<"CreateUser"> | boolean
  }

  export type ProductsCreateInput = {
    name?: string
    price: string
    code: string
    Cor: string
    Peso: string
    user?: CreateUserCreateNestedOneWithoutProductsInput
  }

  export type ProductsUncheckedCreateInput = {
    id?: number
    name?: string
    userId?: number | null
    price: string
    code: string
    Cor: string
    Peso: string
  }

  export type ProductsUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    price?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    Cor?: StringFieldUpdateOperationsInput | string
    Peso?: StringFieldUpdateOperationsInput | string
    user?: CreateUserUpdateOneWithoutProductsNestedInput
  }

  export type ProductsUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    userId?: NullableIntFieldUpdateOperationsInput | number | null
    price?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    Cor?: StringFieldUpdateOperationsInput | string
    Peso?: StringFieldUpdateOperationsInput | string
  }

  export type ProductsCreateManyInput = {
    id?: number
    name?: string
    userId?: number | null
    price: string
    code: string
    Cor: string
    Peso: string
  }

  export type ProductsUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    price?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    Cor?: StringFieldUpdateOperationsInput | string
    Peso?: StringFieldUpdateOperationsInput | string
  }

  export type ProductsUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    userId?: NullableIntFieldUpdateOperationsInput | number | null
    price?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    Cor?: StringFieldUpdateOperationsInput | string
    Peso?: StringFieldUpdateOperationsInput | string
  }

  export type RegisterSalesCreateInput = {
    name?: string
    date: string
    quantity: number
    monthlyTarget: number
    code: string
    seller: string
    user?: CreateUserCreateNestedOneWithoutRegisterSalesInput
  }

  export type RegisterSalesUncheckedCreateInput = {
    id?: number
    name?: string
    userId?: number | null
    date: string
    quantity: number
    monthlyTarget: number
    code: string
    seller: string
  }

  export type RegisterSalesUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    date?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    monthlyTarget?: IntFieldUpdateOperationsInput | number
    code?: StringFieldUpdateOperationsInput | string
    seller?: StringFieldUpdateOperationsInput | string
    user?: CreateUserUpdateOneWithoutRegisterSalesNestedInput
  }

  export type RegisterSalesUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    userId?: NullableIntFieldUpdateOperationsInput | number | null
    date?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    monthlyTarget?: IntFieldUpdateOperationsInput | number
    code?: StringFieldUpdateOperationsInput | string
    seller?: StringFieldUpdateOperationsInput | string
  }

  export type RegisterSalesCreateManyInput = {
    id?: number
    name?: string
    userId?: number | null
    date: string
    quantity: number
    monthlyTarget: number
    code: string
    seller: string
  }

  export type RegisterSalesUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    date?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    monthlyTarget?: IntFieldUpdateOperationsInput | number
    code?: StringFieldUpdateOperationsInput | string
    seller?: StringFieldUpdateOperationsInput | string
  }

  export type RegisterSalesUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    userId?: NullableIntFieldUpdateOperationsInput | number | null
    date?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    monthlyTarget?: IntFieldUpdateOperationsInput | number
    code?: StringFieldUpdateOperationsInput | string
    seller?: StringFieldUpdateOperationsInput | string
  }

  export type CreateUserCreateInput = {
    email: string
    password: string
    admin: boolean
    products?: ProductsCreateNestedManyWithoutUserInput
    RegisterSales?: RegisterSalesCreateNestedManyWithoutUserInput
  }

  export type CreateUserUncheckedCreateInput = {
    id?: number
    email: string
    password: string
    admin: boolean
    products?: ProductsUncheckedCreateNestedManyWithoutUserInput
    RegisterSales?: RegisterSalesUncheckedCreateNestedManyWithoutUserInput
  }

  export type CreateUserUpdateInput = {
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    admin?: BoolFieldUpdateOperationsInput | boolean
    products?: ProductsUpdateManyWithoutUserNestedInput
    RegisterSales?: RegisterSalesUpdateManyWithoutUserNestedInput
  }

  export type CreateUserUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    admin?: BoolFieldUpdateOperationsInput | boolean
    products?: ProductsUncheckedUpdateManyWithoutUserNestedInput
    RegisterSales?: RegisterSalesUncheckedUpdateManyWithoutUserNestedInput
  }

  export type CreateUserCreateManyInput = {
    id?: number
    email: string
    password: string
    admin: boolean
  }

  export type CreateUserUpdateManyMutationInput = {
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    admin?: BoolFieldUpdateOperationsInput | boolean
  }

  export type CreateUserUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    admin?: BoolFieldUpdateOperationsInput | boolean
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type CreateUserNullableRelationFilter = {
    is?: CreateUserWhereInput | null
    isNot?: CreateUserWhereInput | null
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type ProductsCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    userId?: SortOrder
    price?: SortOrder
    code?: SortOrder
    Cor?: SortOrder
    Peso?: SortOrder
  }

  export type ProductsAvgOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
  }

  export type ProductsMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    userId?: SortOrder
    price?: SortOrder
    code?: SortOrder
    Cor?: SortOrder
    Peso?: SortOrder
  }

  export type ProductsMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    userId?: SortOrder
    price?: SortOrder
    code?: SortOrder
    Cor?: SortOrder
    Peso?: SortOrder
  }

  export type ProductsSumOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type RegisterSalesCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    userId?: SortOrder
    date?: SortOrder
    quantity?: SortOrder
    monthlyTarget?: SortOrder
    code?: SortOrder
    seller?: SortOrder
  }

  export type RegisterSalesAvgOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    quantity?: SortOrder
    monthlyTarget?: SortOrder
  }

  export type RegisterSalesMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    userId?: SortOrder
    date?: SortOrder
    quantity?: SortOrder
    monthlyTarget?: SortOrder
    code?: SortOrder
    seller?: SortOrder
  }

  export type RegisterSalesMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    userId?: SortOrder
    date?: SortOrder
    quantity?: SortOrder
    monthlyTarget?: SortOrder
    code?: SortOrder
    seller?: SortOrder
  }

  export type RegisterSalesSumOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    quantity?: SortOrder
    monthlyTarget?: SortOrder
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type ProductsListRelationFilter = {
    every?: ProductsWhereInput
    some?: ProductsWhereInput
    none?: ProductsWhereInput
  }

  export type RegisterSalesListRelationFilter = {
    every?: RegisterSalesWhereInput
    some?: RegisterSalesWhereInput
    none?: RegisterSalesWhereInput
  }

  export type ProductsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type RegisterSalesOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CreateUserCountOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    admin?: SortOrder
  }

  export type CreateUserAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type CreateUserMaxOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    admin?: SortOrder
  }

  export type CreateUserMinOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    admin?: SortOrder
  }

  export type CreateUserSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type CreateUserCreateNestedOneWithoutProductsInput = {
    create?: XOR<CreateUserCreateWithoutProductsInput, CreateUserUncheckedCreateWithoutProductsInput>
    connectOrCreate?: CreateUserCreateOrConnectWithoutProductsInput
    connect?: CreateUserWhereUniqueInput
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type CreateUserUpdateOneWithoutProductsNestedInput = {
    create?: XOR<CreateUserCreateWithoutProductsInput, CreateUserUncheckedCreateWithoutProductsInput>
    connectOrCreate?: CreateUserCreateOrConnectWithoutProductsInput
    upsert?: CreateUserUpsertWithoutProductsInput
    disconnect?: CreateUserWhereInput | boolean
    delete?: CreateUserWhereInput | boolean
    connect?: CreateUserWhereUniqueInput
    update?: XOR<XOR<CreateUserUpdateToOneWithWhereWithoutProductsInput, CreateUserUpdateWithoutProductsInput>, CreateUserUncheckedUpdateWithoutProductsInput>
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type CreateUserCreateNestedOneWithoutRegisterSalesInput = {
    create?: XOR<CreateUserCreateWithoutRegisterSalesInput, CreateUserUncheckedCreateWithoutRegisterSalesInput>
    connectOrCreate?: CreateUserCreateOrConnectWithoutRegisterSalesInput
    connect?: CreateUserWhereUniqueInput
  }

  export type CreateUserUpdateOneWithoutRegisterSalesNestedInput = {
    create?: XOR<CreateUserCreateWithoutRegisterSalesInput, CreateUserUncheckedCreateWithoutRegisterSalesInput>
    connectOrCreate?: CreateUserCreateOrConnectWithoutRegisterSalesInput
    upsert?: CreateUserUpsertWithoutRegisterSalesInput
    disconnect?: CreateUserWhereInput | boolean
    delete?: CreateUserWhereInput | boolean
    connect?: CreateUserWhereUniqueInput
    update?: XOR<XOR<CreateUserUpdateToOneWithWhereWithoutRegisterSalesInput, CreateUserUpdateWithoutRegisterSalesInput>, CreateUserUncheckedUpdateWithoutRegisterSalesInput>
  }

  export type ProductsCreateNestedManyWithoutUserInput = {
    create?: XOR<ProductsCreateWithoutUserInput, ProductsUncheckedCreateWithoutUserInput> | ProductsCreateWithoutUserInput[] | ProductsUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ProductsCreateOrConnectWithoutUserInput | ProductsCreateOrConnectWithoutUserInput[]
    createMany?: ProductsCreateManyUserInputEnvelope
    connect?: ProductsWhereUniqueInput | ProductsWhereUniqueInput[]
  }

  export type RegisterSalesCreateNestedManyWithoutUserInput = {
    create?: XOR<RegisterSalesCreateWithoutUserInput, RegisterSalesUncheckedCreateWithoutUserInput> | RegisterSalesCreateWithoutUserInput[] | RegisterSalesUncheckedCreateWithoutUserInput[]
    connectOrCreate?: RegisterSalesCreateOrConnectWithoutUserInput | RegisterSalesCreateOrConnectWithoutUserInput[]
    createMany?: RegisterSalesCreateManyUserInputEnvelope
    connect?: RegisterSalesWhereUniqueInput | RegisterSalesWhereUniqueInput[]
  }

  export type ProductsUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<ProductsCreateWithoutUserInput, ProductsUncheckedCreateWithoutUserInput> | ProductsCreateWithoutUserInput[] | ProductsUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ProductsCreateOrConnectWithoutUserInput | ProductsCreateOrConnectWithoutUserInput[]
    createMany?: ProductsCreateManyUserInputEnvelope
    connect?: ProductsWhereUniqueInput | ProductsWhereUniqueInput[]
  }

  export type RegisterSalesUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<RegisterSalesCreateWithoutUserInput, RegisterSalesUncheckedCreateWithoutUserInput> | RegisterSalesCreateWithoutUserInput[] | RegisterSalesUncheckedCreateWithoutUserInput[]
    connectOrCreate?: RegisterSalesCreateOrConnectWithoutUserInput | RegisterSalesCreateOrConnectWithoutUserInput[]
    createMany?: RegisterSalesCreateManyUserInputEnvelope
    connect?: RegisterSalesWhereUniqueInput | RegisterSalesWhereUniqueInput[]
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type ProductsUpdateManyWithoutUserNestedInput = {
    create?: XOR<ProductsCreateWithoutUserInput, ProductsUncheckedCreateWithoutUserInput> | ProductsCreateWithoutUserInput[] | ProductsUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ProductsCreateOrConnectWithoutUserInput | ProductsCreateOrConnectWithoutUserInput[]
    upsert?: ProductsUpsertWithWhereUniqueWithoutUserInput | ProductsUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ProductsCreateManyUserInputEnvelope
    set?: ProductsWhereUniqueInput | ProductsWhereUniqueInput[]
    disconnect?: ProductsWhereUniqueInput | ProductsWhereUniqueInput[]
    delete?: ProductsWhereUniqueInput | ProductsWhereUniqueInput[]
    connect?: ProductsWhereUniqueInput | ProductsWhereUniqueInput[]
    update?: ProductsUpdateWithWhereUniqueWithoutUserInput | ProductsUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ProductsUpdateManyWithWhereWithoutUserInput | ProductsUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ProductsScalarWhereInput | ProductsScalarWhereInput[]
  }

  export type RegisterSalesUpdateManyWithoutUserNestedInput = {
    create?: XOR<RegisterSalesCreateWithoutUserInput, RegisterSalesUncheckedCreateWithoutUserInput> | RegisterSalesCreateWithoutUserInput[] | RegisterSalesUncheckedCreateWithoutUserInput[]
    connectOrCreate?: RegisterSalesCreateOrConnectWithoutUserInput | RegisterSalesCreateOrConnectWithoutUserInput[]
    upsert?: RegisterSalesUpsertWithWhereUniqueWithoutUserInput | RegisterSalesUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: RegisterSalesCreateManyUserInputEnvelope
    set?: RegisterSalesWhereUniqueInput | RegisterSalesWhereUniqueInput[]
    disconnect?: RegisterSalesWhereUniqueInput | RegisterSalesWhereUniqueInput[]
    delete?: RegisterSalesWhereUniqueInput | RegisterSalesWhereUniqueInput[]
    connect?: RegisterSalesWhereUniqueInput | RegisterSalesWhereUniqueInput[]
    update?: RegisterSalesUpdateWithWhereUniqueWithoutUserInput | RegisterSalesUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: RegisterSalesUpdateManyWithWhereWithoutUserInput | RegisterSalesUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: RegisterSalesScalarWhereInput | RegisterSalesScalarWhereInput[]
  }

  export type ProductsUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<ProductsCreateWithoutUserInput, ProductsUncheckedCreateWithoutUserInput> | ProductsCreateWithoutUserInput[] | ProductsUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ProductsCreateOrConnectWithoutUserInput | ProductsCreateOrConnectWithoutUserInput[]
    upsert?: ProductsUpsertWithWhereUniqueWithoutUserInput | ProductsUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ProductsCreateManyUserInputEnvelope
    set?: ProductsWhereUniqueInput | ProductsWhereUniqueInput[]
    disconnect?: ProductsWhereUniqueInput | ProductsWhereUniqueInput[]
    delete?: ProductsWhereUniqueInput | ProductsWhereUniqueInput[]
    connect?: ProductsWhereUniqueInput | ProductsWhereUniqueInput[]
    update?: ProductsUpdateWithWhereUniqueWithoutUserInput | ProductsUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ProductsUpdateManyWithWhereWithoutUserInput | ProductsUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ProductsScalarWhereInput | ProductsScalarWhereInput[]
  }

  export type RegisterSalesUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<RegisterSalesCreateWithoutUserInput, RegisterSalesUncheckedCreateWithoutUserInput> | RegisterSalesCreateWithoutUserInput[] | RegisterSalesUncheckedCreateWithoutUserInput[]
    connectOrCreate?: RegisterSalesCreateOrConnectWithoutUserInput | RegisterSalesCreateOrConnectWithoutUserInput[]
    upsert?: RegisterSalesUpsertWithWhereUniqueWithoutUserInput | RegisterSalesUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: RegisterSalesCreateManyUserInputEnvelope
    set?: RegisterSalesWhereUniqueInput | RegisterSalesWhereUniqueInput[]
    disconnect?: RegisterSalesWhereUniqueInput | RegisterSalesWhereUniqueInput[]
    delete?: RegisterSalesWhereUniqueInput | RegisterSalesWhereUniqueInput[]
    connect?: RegisterSalesWhereUniqueInput | RegisterSalesWhereUniqueInput[]
    update?: RegisterSalesUpdateWithWhereUniqueWithoutUserInput | RegisterSalesUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: RegisterSalesUpdateManyWithWhereWithoutUserInput | RegisterSalesUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: RegisterSalesScalarWhereInput | RegisterSalesScalarWhereInput[]
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type CreateUserCreateWithoutProductsInput = {
    email: string
    password: string
    admin: boolean
    RegisterSales?: RegisterSalesCreateNestedManyWithoutUserInput
  }

  export type CreateUserUncheckedCreateWithoutProductsInput = {
    id?: number
    email: string
    password: string
    admin: boolean
    RegisterSales?: RegisterSalesUncheckedCreateNestedManyWithoutUserInput
  }

  export type CreateUserCreateOrConnectWithoutProductsInput = {
    where: CreateUserWhereUniqueInput
    create: XOR<CreateUserCreateWithoutProductsInput, CreateUserUncheckedCreateWithoutProductsInput>
  }

  export type CreateUserUpsertWithoutProductsInput = {
    update: XOR<CreateUserUpdateWithoutProductsInput, CreateUserUncheckedUpdateWithoutProductsInput>
    create: XOR<CreateUserCreateWithoutProductsInput, CreateUserUncheckedCreateWithoutProductsInput>
    where?: CreateUserWhereInput
  }

  export type CreateUserUpdateToOneWithWhereWithoutProductsInput = {
    where?: CreateUserWhereInput
    data: XOR<CreateUserUpdateWithoutProductsInput, CreateUserUncheckedUpdateWithoutProductsInput>
  }

  export type CreateUserUpdateWithoutProductsInput = {
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    admin?: BoolFieldUpdateOperationsInput | boolean
    RegisterSales?: RegisterSalesUpdateManyWithoutUserNestedInput
  }

  export type CreateUserUncheckedUpdateWithoutProductsInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    admin?: BoolFieldUpdateOperationsInput | boolean
    RegisterSales?: RegisterSalesUncheckedUpdateManyWithoutUserNestedInput
  }

  export type CreateUserCreateWithoutRegisterSalesInput = {
    email: string
    password: string
    admin: boolean
    products?: ProductsCreateNestedManyWithoutUserInput
  }

  export type CreateUserUncheckedCreateWithoutRegisterSalesInput = {
    id?: number
    email: string
    password: string
    admin: boolean
    products?: ProductsUncheckedCreateNestedManyWithoutUserInput
  }

  export type CreateUserCreateOrConnectWithoutRegisterSalesInput = {
    where: CreateUserWhereUniqueInput
    create: XOR<CreateUserCreateWithoutRegisterSalesInput, CreateUserUncheckedCreateWithoutRegisterSalesInput>
  }

  export type CreateUserUpsertWithoutRegisterSalesInput = {
    update: XOR<CreateUserUpdateWithoutRegisterSalesInput, CreateUserUncheckedUpdateWithoutRegisterSalesInput>
    create: XOR<CreateUserCreateWithoutRegisterSalesInput, CreateUserUncheckedCreateWithoutRegisterSalesInput>
    where?: CreateUserWhereInput
  }

  export type CreateUserUpdateToOneWithWhereWithoutRegisterSalesInput = {
    where?: CreateUserWhereInput
    data: XOR<CreateUserUpdateWithoutRegisterSalesInput, CreateUserUncheckedUpdateWithoutRegisterSalesInput>
  }

  export type CreateUserUpdateWithoutRegisterSalesInput = {
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    admin?: BoolFieldUpdateOperationsInput | boolean
    products?: ProductsUpdateManyWithoutUserNestedInput
  }

  export type CreateUserUncheckedUpdateWithoutRegisterSalesInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    admin?: BoolFieldUpdateOperationsInput | boolean
    products?: ProductsUncheckedUpdateManyWithoutUserNestedInput
  }

  export type ProductsCreateWithoutUserInput = {
    name?: string
    price: string
    code: string
    Cor: string
    Peso: string
  }

  export type ProductsUncheckedCreateWithoutUserInput = {
    id?: number
    name?: string
    price: string
    code: string
    Cor: string
    Peso: string
  }

  export type ProductsCreateOrConnectWithoutUserInput = {
    where: ProductsWhereUniqueInput
    create: XOR<ProductsCreateWithoutUserInput, ProductsUncheckedCreateWithoutUserInput>
  }

  export type ProductsCreateManyUserInputEnvelope = {
    data: ProductsCreateManyUserInput | ProductsCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type RegisterSalesCreateWithoutUserInput = {
    name?: string
    date: string
    quantity: number
    monthlyTarget: number
    code: string
    seller: string
  }

  export type RegisterSalesUncheckedCreateWithoutUserInput = {
    id?: number
    name?: string
    date: string
    quantity: number
    monthlyTarget: number
    code: string
    seller: string
  }

  export type RegisterSalesCreateOrConnectWithoutUserInput = {
    where: RegisterSalesWhereUniqueInput
    create: XOR<RegisterSalesCreateWithoutUserInput, RegisterSalesUncheckedCreateWithoutUserInput>
  }

  export type RegisterSalesCreateManyUserInputEnvelope = {
    data: RegisterSalesCreateManyUserInput | RegisterSalesCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type ProductsUpsertWithWhereUniqueWithoutUserInput = {
    where: ProductsWhereUniqueInput
    update: XOR<ProductsUpdateWithoutUserInput, ProductsUncheckedUpdateWithoutUserInput>
    create: XOR<ProductsCreateWithoutUserInput, ProductsUncheckedCreateWithoutUserInput>
  }

  export type ProductsUpdateWithWhereUniqueWithoutUserInput = {
    where: ProductsWhereUniqueInput
    data: XOR<ProductsUpdateWithoutUserInput, ProductsUncheckedUpdateWithoutUserInput>
  }

  export type ProductsUpdateManyWithWhereWithoutUserInput = {
    where: ProductsScalarWhereInput
    data: XOR<ProductsUpdateManyMutationInput, ProductsUncheckedUpdateManyWithoutUserInput>
  }

  export type ProductsScalarWhereInput = {
    AND?: ProductsScalarWhereInput | ProductsScalarWhereInput[]
    OR?: ProductsScalarWhereInput[]
    NOT?: ProductsScalarWhereInput | ProductsScalarWhereInput[]
    id?: IntFilter<"Products"> | number
    name?: StringFilter<"Products"> | string
    userId?: IntNullableFilter<"Products"> | number | null
    price?: StringFilter<"Products"> | string
    code?: StringFilter<"Products"> | string
    Cor?: StringFilter<"Products"> | string
    Peso?: StringFilter<"Products"> | string
  }

  export type RegisterSalesUpsertWithWhereUniqueWithoutUserInput = {
    where: RegisterSalesWhereUniqueInput
    update: XOR<RegisterSalesUpdateWithoutUserInput, RegisterSalesUncheckedUpdateWithoutUserInput>
    create: XOR<RegisterSalesCreateWithoutUserInput, RegisterSalesUncheckedCreateWithoutUserInput>
  }

  export type RegisterSalesUpdateWithWhereUniqueWithoutUserInput = {
    where: RegisterSalesWhereUniqueInput
    data: XOR<RegisterSalesUpdateWithoutUserInput, RegisterSalesUncheckedUpdateWithoutUserInput>
  }

  export type RegisterSalesUpdateManyWithWhereWithoutUserInput = {
    where: RegisterSalesScalarWhereInput
    data: XOR<RegisterSalesUpdateManyMutationInput, RegisterSalesUncheckedUpdateManyWithoutUserInput>
  }

  export type RegisterSalesScalarWhereInput = {
    AND?: RegisterSalesScalarWhereInput | RegisterSalesScalarWhereInput[]
    OR?: RegisterSalesScalarWhereInput[]
    NOT?: RegisterSalesScalarWhereInput | RegisterSalesScalarWhereInput[]
    id?: IntFilter<"RegisterSales"> | number
    name?: StringFilter<"RegisterSales"> | string
    userId?: IntNullableFilter<"RegisterSales"> | number | null
    date?: StringFilter<"RegisterSales"> | string
    quantity?: IntFilter<"RegisterSales"> | number
    monthlyTarget?: IntFilter<"RegisterSales"> | number
    code?: StringFilter<"RegisterSales"> | string
    seller?: StringFilter<"RegisterSales"> | string
  }

  export type ProductsCreateManyUserInput = {
    id?: number
    name?: string
    price: string
    code: string
    Cor: string
    Peso: string
  }

  export type RegisterSalesCreateManyUserInput = {
    id?: number
    name?: string
    date: string
    quantity: number
    monthlyTarget: number
    code: string
    seller: string
  }

  export type ProductsUpdateWithoutUserInput = {
    name?: StringFieldUpdateOperationsInput | string
    price?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    Cor?: StringFieldUpdateOperationsInput | string
    Peso?: StringFieldUpdateOperationsInput | string
  }

  export type ProductsUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    price?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    Cor?: StringFieldUpdateOperationsInput | string
    Peso?: StringFieldUpdateOperationsInput | string
  }

  export type ProductsUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    price?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    Cor?: StringFieldUpdateOperationsInput | string
    Peso?: StringFieldUpdateOperationsInput | string
  }

  export type RegisterSalesUpdateWithoutUserInput = {
    name?: StringFieldUpdateOperationsInput | string
    date?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    monthlyTarget?: IntFieldUpdateOperationsInput | number
    code?: StringFieldUpdateOperationsInput | string
    seller?: StringFieldUpdateOperationsInput | string
  }

  export type RegisterSalesUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    date?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    monthlyTarget?: IntFieldUpdateOperationsInput | number
    code?: StringFieldUpdateOperationsInput | string
    seller?: StringFieldUpdateOperationsInput | string
  }

  export type RegisterSalesUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    date?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    monthlyTarget?: IntFieldUpdateOperationsInput | number
    code?: StringFieldUpdateOperationsInput | string
    seller?: StringFieldUpdateOperationsInput | string
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use CreateUserCountOutputTypeDefaultArgs instead
     */
    export type CreateUserCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CreateUserCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ProductsDefaultArgs instead
     */
    export type ProductsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ProductsDefaultArgs<ExtArgs>
    /**
     * @deprecated Use RegisterSalesDefaultArgs instead
     */
    export type RegisterSalesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = RegisterSalesDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CreateUserDefaultArgs instead
     */
    export type CreateUserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CreateUserDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}